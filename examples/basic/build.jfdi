#    _______________ _____ 
#   |_  |  ___|  _  \_   _|
#     | | |_  | | | | | |  
#     | |  _| | | | | | |  
# /\__/ / |   | |/ / _| |_ 
# \____/\_|   |___/  \___/ 
#
# NOTE:
# if you do not have jfdi.py, run this script with python to get it.
"""
jfdi build script

available functions:
  cp(src, dst)  - copy a file or directory
  rm(str)       - remove file or directory
  arg(str)      - convert a /flag into a -flag depending on compiler
  use('?')      - arm environment with make-like variables (LD, CC, etc.)
  cmd(list|str) - run a command on a shell, fatal if error
  die(str)      - fail build with a message, errorlevel 3
  env(str)      - return environment variable or None
  exe(str)      - return filename with exe extension based on TARGET_OS
  exp(str)      - expand a $string, using all global vars
  ext(str)      - return file extension (file.c = .c)
  log(str)      - print to stdout
  mkd(str)      - make all subdirs
  new(src,dst)  - true if file src is newer than file dst
  obj(str)      - return filename with obj file ext (file.c = file.obj)
  pth(str)      - swap path slashes -- \ on windows, / otherwise
  var(str,type) - get command line var passed in with --var or -V

variables:
  HOST_OS       - compiling machine OS    (str)
  TARGET_OS     - target machine OS       (str)

after use(), variables, where applicable:
  CC            - c compiler
  CXX           - c++ compiler
  LD            - linker
  OBJ           - obj extension (ex: 'obj')
  CCTYPE        - compiler 
  CFLAGS        - list of c flags
  CCFLAGS       - list of c++ flags
  LDFLAGS       - list of linker flags
  
"""

JFDI_VERSION = 1

# called at the start of the build
def start_build():
    # this demonstration works with clang.  see multi_compiler
    # example for one that builds with msvc, gcc or clang.
    use("clang")

    # make output directory or do nothing if it exists
    mkd("bin")

    # make debug build
    CFLAGS.extend(['-O0', '-g'])
    

# return a list of files
def list_input_files():
    # this function can return a string with one file, a list of
    # files, or a shell wildcard.
    return ['hello.c', 'main.c']

# return command to build single file in_path or None to skip
def build_this(in_path):

    # obj takes a string filename and returns it with .o.
    # "bin" is an optional prefix.
    #    result:
    # bin/hello.o
    obj_path = obj(in_path, "bin")

    # skip if not out of date
    if not new(in_path, obj_path):
        return None

    # exp expands:
    #
    # $CC string into clang
    # $CFLAGS list into space-separated compiler flags
    #   result:
    # clang -O0 -g -c hello.c -o bin/hello.o
    return exp("$CC $CFLAGS -c " + in_path + " -o " + obj_path)

# called after every input file has been built
def end_build(in_files):
    # convert a list of source files into a space-separated
    # string of files with the same names, but .o extensions.
    #
    #   result:
    # "bin/hello.o bin/main.o "
    objs = obj(in_files, "bin")

    # cmd runs the linker
    cmd(exp("$LD $LDFLAGS " + objs + "-o bin/hello"))
    

# called when the user requests --clean
def clean(in_files):
    # arm the build environment for the clang compiler
    # (this makes obj() understand the obj extension is .o)
    use("clang")

    # remove the obj file corresponding to each .c file
    for file in in_files:
        rm(obj(file, "bin"))

    # rm can recursively remove subdirectories
    rm("bin")
    


    
#
# main -- installs build system if build script is run directly
#
# generated code: do not edit this
#
if __name__ == '__main__':
    import sys
    import os.path
    import urllib.request
    
    print("You have run the build script directly.")
    print("Expected Usage: python jfdi.py -f %s" %
          sys.argv[0])

    DST_FILENAME = 'dl_jfdi.py'
    if os.path.exists(DST_FILENAME):
        sys.exit(0)
    print("Do you want to download the JFDI build script?")
    yesno = input('Y/n -->')
    if yesno == 'n':
        sys.exit(0)

    print("downloading jfdi.py")
    url = "https://raw.githubusercontent.com/mlabbe/jfdi/master/jfdi.py"
    urllib.request.urlretrieve(url, DST_FILENAME)
    
    print("%s downloaded." % DST_FILENAME)
    print("Usage: python %s -f %s" %
          (DST_FILENAME, sys.argv[0]))
    sys.exit(0)

