#    _______________ _____ 
#   |_  |  ___|  _  \_   _|
#     | | |_  | | | | | |  
#     | |  _| | | | | | |  
# /\__/ / |   | |/ / _| |_ 
# \____/\_|   |___/  \___/ 
#
# NOTE:
# if you do not have jfdi.py, run this script with python to get it.

JFDI_VERSION = 1

# called at the start of the build
def start_build():
    # use the clang compiler.  This sets:
    # CC, CXX, LD, OBJ, CCTYPE, CFLAGS, CCFLAGS and LDFLAGS to clang-friendly
    # values.
    #
    # it also lets us call obj() if we we want
    use("clang")

    # after arming, CC is a variable in the global scope
    log("The global value CC is " + CC)

    # exp searches for $CC, first in vars passed in from the command line,
    # then from environment variables, and then from the global scope.
    log(exp("CC is $CC"))
    # go ahead and run jfdi.py with jfdi.py CC=gcc and see the difference

    # we can still get the environment variable using env(), of course.
    log("CC is %s in the environment" % env(CC))

    # now try running with CC=foo jfdi.py, passing it as an
    # environment variable instead of an argument.  Notice how it still expands.
    # output:
    # > CC is foo

    # in order to illustrate which takes precedence, try passing CC in as
    # both a build argument and an environment variable with
    # CC=foo jfdi.py CC=gcc
    # output:
    # > CC is gcc
    #
    # an explicit build argument supersedes whatever is set in the environment.
    

    # CFLAGS is an empty list of compiler flags, also in the global scope.
    # When exp() expands a list, it returns a string with each element
    # separated by a single space.
    CFLAGS.extend([1, 2, 3])
    log(exp("CFLAGS as a string: $CFLAGS"))
    # if a user passes in a var on a command line, naming a list
    # (such as the case with --var CFLAGS=foo), the value overrides
    # all of the CFLAGS set.  (It is not appended).
    
    # exp can also expand local vars *in the current function only*
    a_local_var = 'expanded!'
    log(exp("expanding a local var: $a_local_var"))
    # if a variable exists in the local function, it takes precedence
    # above all else.  It cannot be overridden from the command line.
    # jfdi.py a_local_var=whoops does nothing.

    die("end of demo; we aren't actually building anything")

# return a list of files
def list_input_files():
    return []


# return command to build single file in_path or None to skip
def build_this(in_path):
    return None

# called after every input file has been built
def end_build(in_files):
    pass

# called when the user requests --clean
def clean(in_files):
    pass


    
#
# main -- installs build system if build script is run directly
#
# generated code: do not edit this
#
if __name__ == '__main__':
    import sys
    import os.path
    import urllib.request
    
    print("You have run the build script directly.")
    print("Expected Usage: python jfdi.py -f %s" %
          sys.argv[0])

    DST_FILENAME = 'dl_jfdi.py'
    if os.path.exists(DST_FILENAME):
        sys.exit(0)
    print("Do you want to download the JFDI build script?")
    yesno = input('Y/n -->')
    if yesno == 'n':
        sys.exit(0)

    print("downloading jfdi.py")
    url = "https://raw.githubusercontent.com/mlabbe/jfdi/master/jfdi.py"
    urllib.request.urlretrieve(url, DST_FILENAME)
    
    print("%s downloaded." % DST_FILENAME)
    print("Usage: python %s -f %s" %
          (DST_FILENAME, sys.argv[0]))
    sys.exit(0)

