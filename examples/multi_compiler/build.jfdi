#    _______________ _____ 
#   |_  |  ___|  _  \_   _|
#     | | |_  | | | | | |  
#     | |  _| | | | | | |  
# /\__/ / |   | |/ / _| |_ 
# \____/\_|   |___/  \___/ 
#
"""
jfdi build script

available functions:
  log(str)      - print to stdout
  cmd(list|str) - run a command on a shell, fatal if error
  die(str)      - fail build with a message, errorlevel 3
  env(str)      - return environment variable or None
  obj(str)      - return filename with obj file ext (file.c = file.obj)
  exe(str)      - return filename with exe extension based on TARGET_OS
  ext(str)      - return file extension (file.c = .c)
  exp(str)      - expand a $string, using all global vars
  mkd(str)      - make all subdirs
  arm('?')      - arm environment with make-like variables (LD, CC, etc.)
  arg(str)      - convert a /flag into a -flag depending on compiler
  var(str,type) - get command line var passed in with --var or ''
  pth(str)      - swap path slashes -- \ on windows, / otherwise
  new(src,dst)  - true if file src is newer than file dst
  cp(src, dst)  - copy a file or directory
  rm(str)       - remove file or directory

variables:
  HOST_OS       - compiling machine OS    (str)
  TARGET_OS     - target machine OS       (str)

after arm(), variables, where applicable:
  CC            - c compiler
  CXX           - c++ compiler
  LD            - linker
  OBJ           - obj extension (ex: 'obj')
  CCTYPE        - compiler 
  CFLAGS        - list of c flags
  CCFLAGS       - list of c++ flags
  LDFLAGS       - list of linker flags
  
"""

JFDI_VERSION = 1

cfg = {'i': pth(".\\intermediates\\")}







# called at the start of the build
def start_build():
    global cfg
    if HOST_OS == 'Windows':
        arm("msvc")
    elif HOST_OS == 'Darwin':
        arm("clang")
        
    mkd(cfg['i'])


# return a list of files
def list_input_files():
    return ['hello.c']


# return command to build single file in_path or None to skip
def build_this(in_path):
    if not new(in_path, '%s/%s' % (cfg['i'], obj(in_path))):
        return None
    
    if CCTYPE == 'msvc':
        CFLAGS.append('/Fo%s' % cfg['i'])
    elif CCTYPE == 'gcc':
        CFLAGS.append('-o ' + obj(cfg['i'] + in_path))
        

    if var('DEBUG', bool):
        CFLAGS.append(arg('/O0'))
        if CCTYPE == 'gcc':
            CFLAGS.append(arg('-g'))
    else:
        CFLAGS.append(arg('/O3'))
        
    build = exp("$CC $CFLAGS ")
    build += arg('/c ' + in_path)

    return build


# called after every input file has been built
def end_build(in_files):
    """ in_files - a list of all input files """
    out_exe = exe(cfg['i'] + 'hello.exe', '_d')
    
    if CCTYPE == 'msvc':
        LDFLAGS.append('/OUT:' + out_exe)
    elif CCTYPE == 'gcc':
        LDFLAGS.append('-o ' + out_exe)

    link = exp('$LD $LDFLAGS ')
    for file in in_files:
        link += cfg['i'] + obj(file) + ' '


    cmd(link)

    cp(out_exe, '.')


# called when the user requests --clean
def clean(in_files):
    rm(cfg['i'])
    rm(exe('hello.exe', '_d'))



#
# main -- installs build system if build script is run directly
#
# generated code: do not edit this
#
if __name__ == '__main__':
    import sys
    import os.path
    import urllib.request
    
    print("You have run the build script directly.")
    print("Expected Usage: python jfdi.py -f %s" %
          sys.argv[0])

    DST_FILENAME = 'dl_jfdi.py'
    if os.path.exists(DST_FILENAME):
        sys.exit(0)
    print("Do you want to download the JFDI build script?")
    yesno = input('Y/n -->')
    if yesno == 'n':
        sys.exit(0)

    print("downloading jfdi.py")
    url = "https://raw.githubusercontent.com/mlabbe/jfdi/master/jfdi.py"
    urllib.request.urlretrieve(url, DST_FILENAME)
    
    print("%s downloaded." % DST_FILENAME)
    print("Usage: python %s -f %s" %
          (DST_FILENAME, sys.argv[0]))
    sys.exit(0)
