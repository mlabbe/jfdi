#    _______________ _____ 
#   |_  |  ___|  _  \_   _|
#     | | |_  | | | | | |  
#     | |  _| | | | | | |  
# /\__/ / |   | |/ / _| |_ 
# \____/\_|   |___/  \___/ 
#
# NOTE:
# if you do not have jfdi.py, run this script with python to get it.
# or clone https://github.com/mlabbe/jfdi
"""
jfdi build script

available functions:
  cp(src, dst)  - copy a file or directory
  rm(str|iter)  - remove file or directory
  arg(str)      - convert a /flag into a -flag depending on compiler
  use('?')      - add make-like variables (LD, CC, etc.). gcc, clang, msvc
  cmd(list|str) - run a command on a shell, fatal if error, stdout returns as str
  die(str)      - fail build with a message, errorlevel 3
  env(str)      - return environment variable or None
  exe(str)      - return filename with exe extension based on TARGET_OS
  exp(str)      - expand a $string, searching CLI --vars and then global scope
  ext(str)      - return file extension         (file.c = .c)
  raw(str)      - return file without extension (file.c = file)
  log(str)      - print to stdout
  mkd(str)      - make all subdirs
  obj(str)      - return filename with obj file ext (file.c = file.obj)
  pth(str)      - swap path slashes -- \ on windows, / otherwise
  var(str,type) - get command line var passed in during build instantiation

variables:
  HOST_OS       - compiling machine OS    (str)
  TARGET_OS     - target machine OS       (str)

after use(), variables, where applicable:
  CC            - c compiler
  CXX           - c++ compiler
  LD            - linker
  OBJ           - obj extension (ex: 'obj')
  CCTYPE        - compiler 
  CFLAGS        - list of c flags
  CXXFLAGS      - list of c++ flags
  LDFLAGS       - list of linker flags
  
"""

# This build.jfdi script dogfoods by building the pyinstaller exe for Windows.
# It expects pyinstaller to be installed:
#
# pip install pyinstaller

import os
import zipfile
import platform

JFDI_VERSION = 1

def get_archstr():
    # this assumes pyinstaller is creating an exe with the architecture
    # that the python script running jfdi is built with.
    #
    # this assumption is safe as long as there is one python distro
    archbits = platform.architecture()[0]
    if archbits == '32bit':
        return 'x86'
    elif archbits == '64bit':
        return 'x64'
    else:
        die("unknown architecture " + archbits)

def get_archive_name():
    # get version from script
    version = cmd(['python', '../jfdi.py', '--version']).rstrip()
    
    return "jfdi-%s-%s.zip" % (version, get_archstr())    

# called at the start of the build
def start_build():
    if HOST_OS != 'Windows':
        die("Distribution archives only supported on windows, where " +
            "python 3 installations may be rare.\nJust run the script " +
            "directly!")


    # this puts jfdi.exe in the build.jfdi directory
    os.chdir("../")
    log(cmd(["pyinstaller", "--onefile", "jfdi.py"]))
    os.chdir("dist")

# return a list of files
def list_input_files():
    return []


# return command to build single file in_path or None to skip
def build_this(in_path):
    return None

# called after every input file has been built
def end_build(in_files):
    archive_name = get_archive_name()
    rm(archive_name)
    
    log(exp("creating $archive_name"))
    with zipfile.ZipFile(archive_name, 'w') as zip:
        zip.write('jfdi.exe')
    

# called when the user requests --clean
def clean(in_files):
    rm("jfdi.exe")
    rm("jfdi.spec")
    rm(get_archive_name())

# called when the user requests a canonical run on successful build (optional)
def run():
    log(cmd(['jfdi.exe', '--help']))
    
#
# main -- installs build system if build script is run directly
#
# generated code: do not edit this
#
if __name__ == '__main__':
    import sys
    import os.path
    import urllib.request
    
    print("You have run the build script directly.")
    print("Expected Usage: python jfdi.py -f %s" %
          sys.argv[0])

    DST_FILENAME = 'jfdi.py'
    if os.path.exists(DST_FILENAME):
        sys.exit(0)
    print("Do you want to download the JFDI build script?")
    yesno = input('Y/n -->')
    if yesno == 'n':
        sys.exit(0)

    print("downloading jfdi.py")
    url = "https://raw.githubusercontent.com/mlabbe/jfdi/master/jfdi.py"
    urllib.request.urlretrieve(url, DST_FILENAME)
    
    print("%s downloaded." % DST_FILENAME)
    print("Usage: python %s -f %s" %
          (DST_FILENAME, sys.argv[0]))
    print("To permanently install jfdi, manually copy jfdi.py into your search path.")
    sys.exit(0)

